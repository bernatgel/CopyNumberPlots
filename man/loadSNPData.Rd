% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loadSNPData.R
\name{loadSNPData}
\alias{loadSNPData}
\title{loadSNPData}
\usage{
loadSNPData(snps.file, genome="hg19", chr.col=NULL, pos.col=NULL, baf.col=NULL, lrr.col=NULL, snp.col=NULL, verbose=TRUE)
}
\arguments{
\item{snps.file}{The name of the file with the data}

\item{genome}{The name of the genome (default to "hg19")}

\item{chr.col}{The name or number of the column with chromosome information. If NULL, it is automatically identified. (default to NULL)}

\item{pos.col}{The name or number of the column with position information. If NULL, it is automatically identified. (default to NULL)}

\item{baf.col}{The name or number of the column with BAF information. If NULL, it is automatically identified. (default to NULL)}

\item{lrr.col}{The name or number of the column with LRR information. If NULL, it is automatically identified. (default to NULL)}

\item{verbose}{Wether information messages should be generated. (default to TRUE)}

\item{snp.col}{The name or number of the column with SNP identifier information. If NULL, it is automatically identified. (default to NULL)}
}
\value{
A GRanges object with a range per SNP
}
\description{
Loads SNP array data in a tabular format
}
\details{
Given a file name, the function loads SNP array data in a tabular format.
It will try to identify the columns with the relevant information
(chr, position, BAF, LRR, etc...) or will use the column number or name
supplied by the user, if any. It will convert the tabular data into a
GRanges, with one range per SNP in the table.
}
\note{
The returned GRanges will have the chromosome names following the UCSC style
irrespective of the original format.
}
\examples{
snp.file <- "test.snp.file.csv"

snp.df <- data.frame("id"= "rs1234","chromosome"="chr1", "Start"=0, "end.position"=100,
                    "copy.number.level"=3, "LOH"=0,"median.value.per.segment"=1.2, 
                    "BAF"=0.2, "Log Ratio"=1.5, "strange.name"="strange.value")

write.table(x = snp.df, file = snp.file, col.names = TRUE, row.names = FALSE, sep = "\\t")

loadSNPData(snps.file = snp.file)


}
